/*
 * Copyright (C) 2007 Funambol, Inc.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the Honest Public License, as published by
 * Funambol, either version 1 or (at your option) any later
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY, TITLE, NONINFRINGEMENT or FITNESS FOR A PARTICULAR
 * PURPOSE.  See the Honest Public License for more details.
 *
 * You should have received a copy of the Honest Public License
 * along with this program; if not, write to Funambol,
 * 643 Bair Island Road, Suite 305 - Redwood City, CA 94063, USA
 */

import java.util.List;
import java.util.Map;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

import com.funambol.framework.core.*;
import com.funambol.framework.core.Sync4jException;
import com.funambol.framework.engine.pipeline.InputMessageProcessor;
import com.funambol.framework.engine.pipeline.MessageProcessingContext;
import com.funambol.framework.engine.pipeline.StopProcessingException;
import com.funambol.framework.logging.FunambolLogger;
import com.funambol.framework.logging.FunambolLoggerFactory;

import com.funambol.foundation.synclet.PIMItemsHandler;

/**
 * Contacts:
 * =========
 * Processes the incoming vcard items and adds the missing tokens.
 * Handles large objects.
 * Replaces all occurrences of TEL;CELL; following by WORK, HOME or whatever
 * other param (like X-MOT-RINGID=18446744073709551615;X-MOT-POSITION), with
 * TEL;CELL:.
 * Switches the second with the third value in the address tokens (home, work or
 * other type).
 * Replaces the EMAIL: token with EMAIL;INTERNET: token when its value is '-'.
 *
 * Calendars:
 * ==========
 * . Event
 *   Processes the incoming vevent items and adds the missing tokens.
 *   Handles large objects.
 *
 * @version $Id: MotorolaK1in.bsh,v 1.4 2007/08/31 09:55:40 luigiafassina Exp $
 */
// ------------------------------------------------------------------- Constants
private Map missingCardTokens  = null;
private Map missingEventTokens = null;

// ---------------------------------------------------------------- Private data
private final FunambolLogger log =
    FunambolLoggerFactory.getLogger("engine.pipeline");

// ------------------------------------------------------ Synclet implementation
importCommands("/com/funambol/server/engine/pipeline/phones-support/bsh/commands");

/**
 * Process input message and set MessageProcessingContext property.
 *
 * @param processingContext the message processing context
 * @param message the message to be processed
 *
 * @throws Sync4jException
 */
void preProcessMessage(MessageProcessingContext processingContext,
                       SyncML message                            )
throws Sync4jException {

    if (log.isTraceEnabled()) {
        log.trace("MotorolaK1in.preProcessMessage(...)");
    }

    // This map contains the three lists of items separated based on their type
    PIMItemsHandler pimItemsHandler = new PIMItemsHandler();
    Map mapItems =
        pimItemsHandler.extractIncomingPIMItems(processingContext, message);
    processPIMItems(mapItems, pimItemsHandler);

    throw new StopProcessingException("MotorolaK1in Synclet finished");
}

/**
 * Processes incoming items.
 *
 * @param mapItems the map that contains the three lists of items separated
 *                 based on their type
 * @param pimItemsHandler the object to handle the large object
 *
 */
void processPIMItems(Map mapItems, PIMItemsHandler pimItemsHandler) {

    //
    // Cycle on vcard list
    //
    for (i: (List)mapItems.get(PIMItemsHandler.KEY_VCARD)) {
        preProcessContact(i);
        pimItemsHandler.fixLargeObjectSize(i);
    }

    //
    // Cycle on vevent list
    //
    for (i: (List)mapItems.get(PIMItemsHandler.KEY_VEVENT)) {
        preProcessEvent(i);
        pimItemsHandler.fixLargeObjectSize(i);
    }
}

/**
 * Processes incoming contacts.
 *
 * Replaces all occurrences of TEL;CELL; following by WORK, HOME or whatever
 * other param (like X-MOT-RINGID=18446744073709551615;X-MOT-POSITION), with
 * TEL;CELL:.
 * Switches the second with the third value in the address tokens (home, work or
 * other type).
 * Adds missing tokens.
 *
 * @param i the item to process
 */
void preProcessContact(Item i) {
    data = i.data.data;
    
    data = replaceMobilePhone(data);
    data = switchAdrValues   (data, true);
    data = replaceEmailOther (data);
    data = replaceCharset    (data);
    
    //
    // Adds void standard tokens if they are missing in VCARD item
    //
    data = addVoidTokens(data, "END:VCARD", missingCardTokens);
    i.data.data = data;
}

/**
 * Processes incoming events.
 *
 * Adds missing tokens.
 *
 * @param i the item to process
 */
void preProcessEvent(Item i) {

    data = i.data.data;

    data = replaceCharset(data);
    //
    // Adds void tokens if they are missing in VEVENT item
    //
    content = addVoidTokens(data, "END:VEVENT", missingEventTokens);

    i.data.data = content + "END:VCALENDAR\r\n";
}

/**
 * Initializes the hashmaps with the properties for contact and event.
 */
void init() {
    missingCardTokens  = new HashMap();
    missingEventTokens = new HashMap();

    missingCardTokens.put("\r\nFN"            , "FN:"            );
    missingCardTokens.put("\r\nN"             , "N:;"            );
    missingCardTokens.put("\r\nTEL;CELL"      , "TEL;CELL:"      );
    missingCardTokens.put("\r\nTEL;VOICE;HOME", "TEL;HOME;VOICE:");
    missingCardTokens.put("\r\nTEL;VOICE;WORK", "TEL;WORK;VOICE:");
    missingCardTokens.put("\r\nTEL;VOICE;X-"  , "TEL;VOICE:"     );
    missingCardTokens.put("\r\nTEL;FAX;HOME"  , "TEL;FAX;HOME:"  );
    missingCardTokens.put("\r\nTEL;PAGER"     , "TEL;PAGER:"     );
    missingCardTokens.put("\r\nBDAY:"         , "BDAY:"          );
    missingCardTokens.put("\r\nADR;HOME"      , "ADR;HOME:;;;;;;");
    missingCardTokens.put("\r\nADR"           , "ADR:;;;;;;"     );
    missingCardTokens.put("\r\nEMAIL;HOME"    , "EMAIL;HOME:"    );
    missingCardTokens.put("\r\nEMAIL;WORK"    , "EMAIL;WORK:"    );
    missingCardTokens.put("\r\nEMAIL"         , "EMAIL:"         );
    missingCardTokens.put("\r\nURL"           , "URL:"           );

    missingEventTokens.put("\r\nSUMMARY"    , "SUMMARY:"    );
    missingEventTokens.put("\r\nDESCRIPTION", "DESCRIPTION:");
    missingEventTokens.put("\r\nLOCATION"   , "LOCATION:"   );
    missingEventTokens.put("\r\nDTSTART"    , "DTSTART:"    );
    missingEventTokens.put("\r\nDTEND"      , "DTEND:"      );
    missingEventTokens.put("\r\nAALARM"     , "AALARM:"     );
    missingEventTokens.put("\r\nCATEGORIES" , "CATEGORIES:" );
    missingEventTokens.put("\r\nRRULE"      , "RRULE:"      );
}

/**
 * Replaces all occurrences of TEL;CELL; following by WORK, HOME or whatever
 * other param (like X-MOT-RINGID=18446744073709551615;X-MOT-POSITION), with
 * TEL;CELL:. This because, from the user interface of the phone, it is possible
 * to set only the Mobile phone (without specified the type HOME or WORK) even
 * if the phone sends the first mobile as TEL;CELL;HOME, the second mobile as
 * TEL;CELL;WORK and the other mobiles as TEL;CELL. Moreover, server side,
 * mobile home and mobile work numbers are not handled.
 *
 * @param String data the data item
 *
 * @return the modified data
 */
String replaceMobilePhone(String data) {
    data = data.replaceAll("\nTEL;CELL.*:", "\nTEL;CELL:");
    return data;
}

/**
 * Replaces the EMAIL: token with EMAIL;INTERNET: token when its value is '-'.
 *
 * For example:
 *     the device sends EMAIL:-\r\n
 *     this synclet replaces it with EMAIL;INTERNET:\r\n
 *
 * On the phone is not possible to create a contact without almoust one tel or
 * one email: so, if the server sends a contact without phones and emails, the
 * phone is not able to save it. As workaround of this, the server sends a
 * contact with EMAIL:- token.
 *
 * @param String data the data item
 *
 * @return the modified data
 */
String replaceEmailOther(String data) {
    data = data.replaceAll("\nEMAIL:-", "\nEMAIL;INTERNET:");
    return data;
}

/**
 * Removes the blank space after the CHARSET= 
 *
 * For example:
 *     the device sends CHARSET= UTF-8:
 *     this synclet replaces it with CHARSET=UTF-8:
 *
 * @param String data the data item
 *
 * @return the modified data
 */
String replaceCharset(String data) {
    data = data.replaceAll("CHARSET= UTF-8:","CHARSET=UTF-8:");
    
    return data;
}
