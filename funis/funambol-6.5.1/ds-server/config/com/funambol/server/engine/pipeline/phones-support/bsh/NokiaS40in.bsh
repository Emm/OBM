/*
 * Copyright (C) 2007 Funambol, Inc.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the Honest Public License, as published by
 * Funambol, either version 1 or (at your option) any later
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY, TITLE, NONINFRINGEMENT or FITNESS FOR A PARTICULAR
 * PURPOSE.  See the Honest Public License for more details.
 *
 * You should have received a copy of the Honest Public License
 * along with this program; if not, write to Funambol,
 * 643 Bair Island Road, Suite 305 - Redwood City, CA 94063, USA
 */

import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import com.funambol.framework.core.*;
import com.funambol.framework.core.Sync4jException;
import com.funambol.framework.engine.pipeline.InputMessageProcessor;
import com.funambol.framework.engine.pipeline.MessageProcessingContext;
import com.funambol.framework.engine.pipeline.StopProcessingException;
import com.funambol.framework.logging.FunambolLogger;
import com.funambol.framework.logging.FunambolLoggerFactory;

import com.funambol.foundation.synclet.PIMItemsHandler;

/**
 * Contacts:
 * =========
 * Processes the incoming vcard items and adds the missing tokens.
 * Handles large objects.
 * Sets item size to null if the size is 0.
 * Replaces TEL;PREF prefix with TEL;
 * Replaces the first TEL;FAX: with tokens TEL;FAX;HOME:, the second one with
 * TEL;FAX;WORK: so the numbers are stored like Home Fax Number and Business Fax
 * Number.
 * Replaces ADR token with ADR;HOME prefix so the address is stored like Home
 * Address for Nokia 61xx 3rd Ed. phones.
 * Replaces LABEL tokens with the corrispondent ADR tokens for Nokia 602x, for
 * Nokia 623x, Nokia 6101 2nd Ed. phones.
 *
 * Calendars:
 * ==========
 * . Event
 *   Processes the incoming vevent items and adds the missing tokens.
 *   Handles large objects.
 *   Sets item size to null if the size is 0.
 *   Adjusts the AALARM token so it can be correctly understood by the server.
 *   Handles event times for vevent items.
 *   Replaces with T235900 (like for all day event) the time of the end date
 *   when it is T000000 and it is equals at the time of the start date.
 *
 * . Todo
 *   Processes the incoming vtodo items and adds the missing tokens.
 *   Handles large objects.
 *   Sets item size to null if the size is 0.
 *   Adjusts the AALARM token so it can be correctly understood by the server.
 *
 * @version $Id: NokiaS40in.bsh,v 1.3 2007/06/18 13:34:04 luigiafassina Exp $
 */
// ------------------------------------------------------------------- Constants
private final String USER_AGENT_N6131 = "Nokia6131";
private final String USER_AGENT_N6101 = "Nokia6101";
private final String USER_AGENT_N602X = "Nokia602" ;
private final String USER_AGENT_N623X = "Nokia623" ;

private final String TIMEZERO      = "T000000";
private final String TIMEENDALLDAY = "T235900";

private Map missingCardTokens      = null;
private Map missingEventTokens     = null;
private Map missingTodoTokens      = null;
private Map missingCardTokensN6131 = null;

// ---------------------------------------------------------------- Private data
private final FunambolLogger log =
    FunambolLoggerFactory.getLogger("engine.pipeline");

// ------------------------------------------------------ Synclet implementation
importCommands("/com/funambol/server/engine/pipeline/phones-support/bsh/commands");

/**
 * Processes input message and set MessageProcessingContext property.
 *
 * @param mpc the message processing context
 * @param message the message to be processed
 *
 * @throws Sync4jException
 */
void preProcessMessage(MessageProcessingContext mpc,
                       SyncML message              )
throws Sync4jException {

    if (log.isTraceEnabled()) {
        log.trace("NokiaS40in.preProcessMessage(...)");
    }
    // This map contains the three lists of items separated based on their type
    PIMItemsHandler pimItemsHandler = new PIMItemsHandler();
    Map mapItems = pimItemsHandler.extractIncomingPIMItems(mpc, message);

    //
    // Find the user-agent from http request header
    //
    String userAgent = getUserAgent(mpc);
    
    processPIMItems(mapItems, pimItemsHandler, userAgent);
    
    throw new StopProcessingException("NokiaS40in Synclet finished");
}

/**
 * Processes incoming items.
 *
 * @param mapItems the map that contains the three lists of items separated
 *                 based on their type
 * @param pimItemsHandler the object to handle the large object
 * @param userAgent the user-agent from http request header
 */
void processPIMItems(Map             mapItems       ,
                     PIMItemsHandler pimItemsHandler,
                     String          userAgent      ) {

    //
    // Cycle on vcard list
    //
    for (i: (List)mapItems.get(PIMItemsHandler.KEY_VCARD)) {    
        preProcessVCard(i, userAgent);
        pimItemsHandler.fixLargeObjectSize(i);
    }
    
    //
    // Cycle on vevent list
    //
    for (i: (List)mapItems.get(PIMItemsHandler.KEY_VEVENT)) {
        preProcessVEvent(i);
        pimItemsHandler.fixLargeObjectSize(i);
    }

    //
    // Cycle on vtodo list
    //
    for (i: (List)mapItems.get(PIMItemsHandler.KEY_VTODO)) {
        preProcessVTodo(i);
        pimItemsHandler.fixLargeObjectSize(i);
    }
}

/**
 * Processes incoming contacts.
 *
 * Sets item size to null if the size is 0.
 * Replaces TEL;PREF prefix with TEL;
 * Handles fax numbers.
 * Replaces the ADR token with ADR;HOME prefix for Nokia 61xx 3rd Ed. token
 * (these phones can handle only one address).
 * Replaces the LABEL tokens with the correspond ADR tokens for Nokia 602x, for
 * Nokia 623x and Nokia 6101 (these phones can handle more addresses).
 * Adds missing tokens.
 *  
 * @param i the item to be processed
 * @param userAgent the user-agent from http request header
 *
 */
void preProcessVCard(Item i, String userAgent) {

    removeSize(i);
    
    data = i.data.data;
    data = replaceTelPref  (data);
    data = replaceFaxNumber(data);
    data = replaceAdr      (data);
    
    //
    // The Nokia 602x, Nokia 623x and Nokia 6101 send LABEL token in order to
    // specify the address (without specify the address type).
    // Instead, the Nokia 61xx 3rd Ed. send the ADR token in order to specify
    // the address (without send the address type).
    //
    if (userAgent.startsWith(USER_AGENT_N602X) ||
        userAgent.startsWith(USER_AGENT_N623X) ||
        userAgent.startsWith(USER_AGENT_N6101)  ) {
        
        data = handleLabel(data);
    }
    
    //
    // Adds void standard tokens if they are missing in VCARD item
    //
    data = addVoidTokens(data, "END:VCARD", missingCardTokens);
    
    //
    // In the case in which the phone is a Nokia 6131, there are other tokens
    // to add if not present.
    //
    if (userAgent.startsWith(USER_AGENT_N6131)) {
        //
        // Adds void standard tokens if they are missing in VCARD item
        //
        data = addVoidTokens(data                  ,
                             "END:VCARD"           ,
                             missingCardTokensN6131);
    }

    i.data.data = data;
}

/**
 * Processes incoming calendars.
 *
 * Sets item size to null if the size is 0.
 * Handles AALARM token.
 * Handles event times. 
 * Adds missing tokens.
 *  
 * @param i the vevent item to be processed
 */
void preProcessVEvent(Item i) {
    removeSize(i);
    handleAAlarm(i);
    handleEventTimes(i);
    
    //
    // Adds void tokens if they are missing in VEVENT item
    //
    content = addVoidTokens(i.data.data, "END:VEVENT", missingEventTokens);

    i.data.data = content + "END:VCALENDAR\r\n";
}

/**
 * Processes incoming vtodo.
 *
 * Sets item size to null if the size is 0.
 * Handles AALARM token.
 * Adds missing tokens.
 *  
 * @param i the vtodo item to be processed
 */
void preProcessVTodo(Item i) {
    removeSize(i);
    handleAAlarm(i);
    
    //
    // Adds void tokens if they are missing in VTODO item
    //
    content = addVoidTokens(i.data.data, "END:VTODO", missingTodoTokens);

    i.data.data = content + "END:VCALENDAR\r\n";
}


/**
 * Sets item size to null if the size is 0.
 * The device sends size 0 even if the data is not empty and is not a large
 * object.
 *
 * @param i the item to be processed
 */   
void removeSize(Item i) {
    meta = i.meta;
    if (meta != null && meta.size == 0) {
        i.meta.setSize(null);
    }
}

/**
 * Replaces TEL;PREF prefix with TEL;
 *
 * @param data the data item
 *
 * @return the modified data
 */
String replaceTelPref(String data) {
    data = data.replaceAll("\nTEL;PREF", "\nTEL");
    return data;
}

/**
 * Handles fax numbers.
 * 
 * Notes about items sent by the device:
 *   
 *  - Device sends a TEL;FAX: token for each fax number
 *
 *  - Device sends phone numbers in the same order as they were inserted
 *
 * This method performs the following:
 * 
 *  If at least one fax number exists then:
 *   
 *  1) replaces the first      TEL;FAX:
 *     with token              TEL;FAX;HOME:, if it exists; 
 *     inserts an empty token otherwise
 *  2) replaces the subsequent TEL;FAX: 
 *     with token              TEL;FAX;WORK:, 
 *     if it exists; insert an empty token otherwise
 *  3) leaves the subsequent   TEL;FAX: unchanged, if it exists; inserts an 
 *     empty token otherwise
 *  4) removes remaining fax numbers
 *   
 * The replacement tokens are always put just before the END:VCARD token and in
 * the following order: home fax number, work fax number, generic fax number. 
 * Here is an example:
 *  ...
 *  TEL;FAX;HOME:987654321
 *  TEL;FAX;WORK:876543210
 *  TEL;FAX:765432109
 *  END:VCARD
 *  
 * Fax tokens order must be taken by any message sent by the server to the device 
 * in order to preserve number meaning.
 *
 * @param data the data to process
 *
 * @return the modified data
 */
String replaceFaxNumber(String data) {

    firstFaxToken = "TEL;FAX";
    found = data.indexOf(firstFaxToken);

    if (found != -1) {
        
        StringBuffer sb =
                new StringBuffer(data.substring(0, data.indexOf("\nEND:VCARD")));            
            
        addFax(sb, firstFaxToken, "TEL;FAX;HOME:");
        addFax(sb, "TEL;FAX:",    "TEL;FAX;WORK:");
        addFax(sb, "TEL;FAX:",    "TEL;FAX:");
            
        removeOtherFax(sb);
            
        sb.append("\nEND:VCARD\r\n");
                
        return sb.toString();
    }
                
    return data;
}
            
/**
 * Replaces the token "searchedToken" with token "newToken" with the same value.
 * 
 * @param data the string buffer to be updated
 * @param searchedToken the token to be replaced
 * @param newToken the replacement token
 *  
 */               
void addFax(StringBuffer data, String searchedToken, String newToken) {
    int startFax = data.indexOf("\n" + searchedToken);
    if (startFax != -1) {
        int endFax = data.indexOf("\n", startFax + 1);
        
        if (endFax == -1) {
            endFax = data.length();
        }
            
        fax = data.substring(startFax, endFax);
        
        data.delete(startFax, endFax);
        data.append("\n" + newToken + fax.substring(fax.indexOf(':') + 1));
    } else {
        data.append("\n" + newToken);
    }
}
        
/**
 * Removes all the TEL:FAX: token other than the 3 mandatory fax tokens.
 * 
 * @param data the string buffer to be modified. 
 */          
void removeOtherFax(StringBuffer data){
    while(true) {
        startFaxHome = data.indexOf("\nTEL;FAX;HOME");
        startFax     = data.indexOf("\nTEL;FAX:");
        if (startFax >= startFaxHome) {
            return;
        }
        if (startFax != -1) {
            int endFax = data.indexOf("\r", startFax);
            data.delete(startFax, endFax + 1);
        }
    }
}

/**
 * Replaces ADR token with ADR;HOME prefix so the address is stored like Home
 * Address.
 * The Nokia 61xx 3rd Ed. are able to handle and store only one address.
 * For the server this address must match like home address.
 *
 * @param data the data item
 *
 * @return the modified data
 */
String replaceAdr(String data) {
    data = data.replaceAll("\nADR", "\nADR;HOME");
    return data;
}

/**
 * Adds ;;; at the end of AALARM token because the device sends this token with
 * only date/time information (for example: AALARM:20070601T084500 becomes
 * AALARM:20070601T084500;;;). In this way the server is able to parser this
 * token.
 *
 * @param i the item to process
 */  
void handleAAlarm(Item i){
    
    data = i.data.data;
    
    startAlarm = data.indexOf("\nAALARM");
    
    if (startAlarm != -1){
        
        endAlarm        = data.indexOf("\r", startAlarm);
        alarmValueStart = data.indexOf(":" , startAlarm) + 1;
        alarmValue      = data.substring(alarmValueStart, endAlarm);
        
        StringBuffer newData = new StringBuffer();
        
        newData.append(data.substring(0, startAlarm))
               .append("\nAALARM:"                  )
               .append(alarmValue                   )
               .append(";;;"                        )
               .append(data.substring(endAlarm)     );
        
        i.data.data = newData.toString();
    }
}

/**
 * Replaces with T235900 (like for all day event) the time of the end date when
 * it is T000000 and it is equals at the time of the start date.
 * 
 * @param i item to process  
 */  
void handleEventTimes(Item i) {
    //
    // Checks:
    // 1) Is the start date equal to end date?
    // 2) Does the start date finish with T000000?
    //
    data = i.data.data;

    indStart = data.indexOf("\nDTSTART:");
    indEnd   = data.indexOf("\nDTEND:"  );
    if (indStart == -1 || indEnd == -1) {
        return;
    }
    dtStart = data.substring(indStart + 9, data.indexOf("\r\n", indStart + 9));
    dtEnd   = data.substring(indEnd   + 7, data.indexOf("\r\n", indEnd   + 7));

    if (!dtStart.equals(dtEnd)) {
        return;
    }

    if (!dtEnd.endsWith(TIMEZERO)) {
        return;
    }
    dtEnd = dtEnd.replace(TIMEZERO, TIMEENDALLDAY);

    newData = new StringBuffer(data.substring(0, indEnd + 7))
            .append(dtEnd)
            .append(data.substring(data.indexOf("\r\n", indEnd + 7)))
            ;

    i.data.setData(newData.toString());
}

/**
 * Initializes the hashmaps with the properties for contact.
 */
void init() {
    missingCardTokens  = new HashMap();
    missingEventTokens = new HashMap();
    missingTodoTokens  = new HashMap();
    initPropsVCard ();
    initPropsVEvent();
    initPropsVTodo ();
    
    missingCardTokensN6131 = new HashMap();
    initPropsVCardN6131();
}

/**
 * Initializes hashmap of contact properties.
 */
void initPropsVCard() {
    missingCardTokens.put("\r\nN"             , "N:;"            );
    missingCardTokens.put("\r\nTEL;VOICE"     , "TEL;VOICE:"     );
    missingCardTokens.put("\r\nTEL;CELL;VOICE", "TEL;CELL;VOICE:");
    missingCardTokens.put("\r\nTEL;HOME;VOICE", "TEL;HOME;VOICE:");
    missingCardTokens.put("\r\nTEL;WORK;VOICE", "TEL;WORK;VOICE:");
    missingCardTokens.put("\r\nEMAIL"         , "EMAIL:"         );
    missingCardTokens.put("\r\nNOTE"          , "NOTE:"          );
    missingCardTokens.put("\r\nURL"           , "URL:"           );
    missingCardTokens.put("\r\nTEL;FAX;HOME"  , "TEL;FAX;HOME:"  );
    missingCardTokens.put("\r\nTEL;FAX;WORK"  , "TEL;FAX;WORK:"  );
    missingCardTokens.put("\r\nTEL;FAX"       , "TEL;FAX:"       );
    missingCardTokens.put("\r\nADR"           , "ADR;HOME:;;;;;;");
}

/**
 * Initializes hashmap of contact properties for Nokia 6131.
 */
void initPropsVCardN6131() {
    missingCardTokensN6131.put("\r\nBDAY" , "BDAY:" );
    missingCardTokensN6131.put("\r\nTITLE", "TITLE:");
    missingCardTokensN6131.put("\r\nORG"  , "ORG:"  );
}

/**
 * Initializes hashmap of vevent properties.
 */
void initPropsVEvent() {
    missingEventTokens.put("\r\nDTSTART"   , "DTSTART:"   );
    missingEventTokens.put("\r\nDTEND"     , "DTEND:"     );
    missingEventTokens.put("\r\nRRULE"     , "RRULE:"     );
    missingEventTokens.put("\r\nCATEGORIES", "CATEGORIES:");
    missingEventTokens.put("\r\nSUMMARY"   , "SUMMARY:"   );
    missingEventTokens.put("\r\nLOCATION"  , "LOCATION:"  );
    missingEventTokens.put("\r\nAALARM"    , "AALARM:"    );
}

/**
 * Initializes hashmap of vtodo properties.
 */
void initPropsVTodo() {
    missingTodoTokens.put("\r\nDUE"     , "DUE:"     );
    missingTodoTokens.put("\r\nDTEND"   , "DTEND:"   );
    missingTodoTokens.put("\r\nAALARM"  , "AALARM:"  );
    missingTodoTokens.put("\r\nPRIORITY", "PRIORITY:");
    missingTodoTokens.put("\r\nSTATUS"  , "STATUS:"  );
    missingTodoTokens.put("\r\nSUMMARY" , "SUMMARY:" );
}
