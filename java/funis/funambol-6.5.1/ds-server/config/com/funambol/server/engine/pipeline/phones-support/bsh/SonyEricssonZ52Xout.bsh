/*
 * Copyright (C) 2007 Funambol, Inc.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the Honest Public License, as published by
 * Funambol, either version 1 or (at your option) any later
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY, TITLE, NONINFRINGEMENT or FITNESS FOR A PARTICULAR
 * PURPOSE.  See the Honest Public License for more details.
 *
 * You should have received a copy of the Honest Public License
 * along with this program; if not, write to Funambol,
 * 643 Bair Island Road, Suite 305 - Redwood City, CA 94063, USA
 */

import java.util.List;
import java.util.Map;

import com.funambol.framework.core.*;
import com.funambol.framework.core.Sync4jException;
import com.funambol.framework.engine.pipeline.OutputMessageProcessor;
import com.funambol.framework.engine.pipeline.MessageProcessingContext;
import com.funambol.framework.engine.pipeline.StopProcessingException;
import com.funambol.framework.logging.FunambolLogger;
import com.funambol.framework.logging.FunambolLoggerFactory;

import com.funambol.foundation.synclet.PIMItemsHandler;

/**
 * This synclet is used with every device having user-agent starting with string
 * "SonyEricssonZ52", that is sent (for example) by the following devices:
 * Z520a, Z520i, Z525a
 *  
 * Contacts:
 * =========
 * Deletes any fax number other than TEL;FAX token.
 * Deletes any work number other than TEL;WORK;PREF: token.
 *
 * Calendars:
 * ==========
 * . Event
 *   Sets the empty tokens with dummy value.
 *    
 * @version $Id: SonyEricssonZ52Xout.bsh,v 1.3 2007/07/25 13:43:10 luigiafassina Exp $
 */
// ---------------------------------------------------------------- Private data
private final FunambolLogger log =
    FunambolLoggerFactory.getLogger("engine.pipeline");

// ------------------------------------------------------ Synclet implementation
importCommands("/com/funambol/server/engine/pipeline/phones-support/bsh/commands");

/**
 * Process and manipulate the output message.
 *
 * @param processingContext the message processing context
 * @param message the message to be processed
 *
 * @throws Sync4jException
 */
void postProcessMessage(MessageProcessingContext processingContext,
                        SyncML message                            )
throws Sync4jException {
    if (log.isTraceEnabled()) {
        log.trace("SonyEricssonZ52Xout.postProcessMessage(...)");
    }

    // This map contains the three lists of items separated based on their type
    PIMItemsHandler pimItemsHandler = new PIMItemsHandler();
    Map mapItems = pimItemsHandler.extractOutgoingPIMItems(message);
    processPIMItems(mapItems);
    
    throw new StopProcessingException("SonyEricssonZ52Xout Synclet finished");
}

/**
 * Processes outgoing items.
 *
 * @param mapItems the map that contains the three lists of items separated
 *                 based on their type
 *
 */
void processPIMItems(Map mapItems) {

    //
    // Cycle on vcard list
    //
    for (i: (List)mapItems.get(PIMItemsHandler.KEY_VCARD)) {
        postProcessVCard(i);
    }
    
    //
    // Cycle on vevent list
    //
    for (i: (List)mapItems.get(PIMItemsHandler.KEY_VEVENT)) {
        postProcessVEvent(i);
    }    
}

/**
 * Processes outgoing contacts.
 *
 * Deletes any fax number other than TEL;FAX token.
 * Deletes any work number other than TEL;WORK;PREF: token.
 *
 * @param i the item to process
 */
void postProcessVCard(Item i) {

    data = i.data.data;

    data = handleFaxNumbers (data);
    data = handleWorkNumbers(data);
    
    i.data.data = data;
}

/**
 * Processes outgoing events.
 *
 * Sets the empty tokens with dummy value.
 *      
 * @param i the item content
 */
void postProcessVEvent(Item i) {
    data = i.data.data;

    data = setDummyValue(data, "SUMMARY"    , "SUMMARY"    );
    data = setDummyValue(data, "LOCATION"   , "LOCATION"   );
    data = setDummyValue(data, "DESCRIPTION", "DESCRIPTION");        
        
    i.data.setData(data);
}

/**
 * Deletes any fax number other than TEL;FAX;HOME token.
 * 
 * Notes about device  
 * ==================
 *
 * On device it is possible to insert 0 or 1 "Fax" number.
 * A vcard from the device for a contact with fax number, contains the token 
 * TEL;FAX: , which is stored by the server as "other fax number".
 * Given a vcard sent by the server, the device gets the last "fax number" that 
 * appears in the vcard, regardless of its type. Thus, number duplications and
 * unpredictable updates can occur.
 * 
 * Here is an example of such behaviors:
 *  Insert a contact with a home and work fax on the server and sync.
 *  Assuming the following vcard is sent by the server
 *      ...   
 *      TEL;FAX;WORK:2222 
 *      TEL;FAX;HOME:1111
 *      ...
 *  then the value "1111" will be displaied by the device, just because it is 
 *  the last fax number that appears in the vcard.
 *  If the fax number is modified in the device ("111100") then, after sync,
 *  3 fax numbers appears on the server:
 *      home fax: 1111
 *      work fax: 2222
 *      other fax:111100
 *  If the work fax number is modified (222200) on the server, while the others 
 *  remain unchanged, and the following vcard is sent by the server during sync
 *      ...   
 *      TEL;FAX;HOME:1111
 *      TEL;FAX:111100 
 *      TEL;FAX;WORK:222200 
 *      ...
 *  then "222200" will appear on the device, while no changes were expected.
 *
 * In order to prevent those behaviors, any fax tokens other than TEL;FAX;HOME 
 * are removed from the outgoing item. This is the conseguence of the input choice
 * to consider the only fax number sent by the phone as the home fax number.
 * Only home fax number is taken into account; if it is not present then no other
 * fax number is sent.
 * 
 * @param data the item data to process
 *
 * @return the modified data
 */ 
String handleFaxNumbers(String data) {

    data = deleteOutProperty(data, "TEL;FAX:");
    data = deleteOutProperty(data, "TEL;FAX;WORK");

    return data;
}

/**
 * Deletes any work number other than TEL;VOICE;WORK: token.
 * 
 * On device it is possible to insert 0 or 1 "Work" number. 
 * A vcard from the device for a contact with work number, contains the token 
 * TEL;WORK: , which is stored by the server as "business telephone number".
 * Given a vcard sent by the server, the device gets the last "work number" that 
 * appears in the vcard, regardless of its type. Thus, number duplications and
 * unpredictable updates can occur.
 * 
 * Here is a round trip synchronization that shows such behavior:   
 * - from server to device:
 *
 *   create on server a contact with
 *     work phone: 22
 *     work main:  33
 *
 *   outgoing vcard fragment: --->  phones on device:
 *   TEL;VOICE;WORK:22
 *   TEL;WORK;PREF:33               Work: 33
 *   
 *   Work phone on device is 33 just because is the last work number in the vcard.
 *
 * - from device to server:       
 *                                incoming vcard fragment:
 *   work phone: 333              TEL;WORK:333             <---  Work: 333
 *   work main:  33                                   
 *                                
 * In order to give to the device work number an unique meaning, incoming Work
 * phone is intended to be the "business telephone number".
 * To do this, simply remove any work number other than TEL;VOICE;WORK: from the 
 * outgoing vcard, while no processing is necessary for the incoming vcard, 
 * because the wanted property is already sent by the device.
 *
 * @param data the data item to process
 * @return the modified data
 */
String handleWorkNumbers(String data) {
    data = deleteOutProperty(data, "TEL;WORK;PREF:");    
}

/**
 * Called initializing the synclet
 */
void init() {
    // do nothing
}
