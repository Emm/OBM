/*
 * Copyright (C) 2007 Funambol, Inc.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the Honest Public License, as published by
 * Funambol, either version 1 or (at your option) any later
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY, TITLE, NONINFRINGEMENT or FITNESS FOR A PARTICULAR
 * PURPOSE.  See the Honest Public License for more details.
 *
 * You should have received a copy of the Honest Public License
 * along with this program; if not, write to Funambol,
 * 643 Bair Island Road, Suite 305 - Redwood City, CA 94063, USA
 */

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.funambol.framework.core.*;
import com.funambol.framework.core.Sync4jException;
import com.funambol.framework.engine.pipeline.InputMessageProcessor;
import com.funambol.framework.engine.pipeline.MessageProcessingContext;
import com.funambol.framework.engine.pipeline.StopProcessingException;
import com.funambol.framework.logging.FunambolLogger;
import com.funambol.framework.logging.FunambolLoggerFactory;
import com.funambol.framework.server.Sync4jDevice;

import com.funambol.foundation.synclet.PIMItemsHandler;

/**
 * Contacts:
 * =========
 * Processes the incoming vcard items and adds the missing tokens.
 * All email fields are sent by the device as EMAIL;INTERNET:,
 * even if they're stored on device as Home, Work and Other email.
 * Synclet corrects this wrong behaviour and replaces first email
 * with EMAIL;INTERNET;HOME: and second email with
 * EMAIL;INTERNET;WORK:
 * Removes the command size.
 *
 * Calendars:
 * ==========
 * . Event
 *   Processes the incoming vevent items and adds the missing tokens.
 *   Handles large objects.
 *   Removes the command size.
 *
 * @version $Id: PanasonicX70in.bsh,v 1.1 2007/08/31 09:51:01 luigiafassina Exp $
 */

// ---------------------------------------------------------------- Private data
private final FunambolLogger log =
    FunambolLoggerFactory.getLogger("engine.pipeline");

// ------------------------------------------------------ Synclet implementation
importCommands("/com/funambol/server/engine/pipeline/phones-support/bsh/commands");

/**
 * Process input message and set MessageProcessingContext property.
 *
 * @param processingContext the message processing context
 * @param message the message to be processed
 *
 * @throws Sync4jException
 */
void preProcessMessage(MessageProcessingContext processingContext,
                       SyncML message                            )
throws Sync4jException {

    if (log.isTraceEnabled()) {
        log.trace("PanasonicX70in.preProcessMessage(...)");
    }
    
    // This map contains the two lists of items separated based on their type
    PIMItemsHandler pimItemsHandler = new PIMItemsHandler();
    Map mapItems =
        pimItemsHandler.extractIncomingPIMItems(processingContext, message);
    
    processPIMItems(mapItems, pimItemsHandler);

    throw new StopProcessingException("PanasonicX70in Synclet finished");
}

/**
 * Processes incoming items.
 *
 * @param mapItems the map that contains the three lists of items separated
 *                 based on their type
 * @param pimItemsHandler the object to handle the large object
 * @param device the device information
 *
 */
void processPIMItems(Map             mapItems       ,
                     PIMItemsHandler pimItemsHandler) {

    //
    // Cycle on vCard list
    //
    for (i: (List)mapItems.get(PIMItemsHandler.KEY_VCARD)) {
        preProcessContact(i);
        pimItemsHandler.fixLargeObjectSize(i);
    }
    
    //
    // Cycle on vEvent list
    //
    for (i: (List)mapItems.get(PIMItemsHandler.KEY_VEVENT)) {
        pimItemsHandler.fixLargeObjectSize(i);
    }    
}

/**
 * Processes incoming contacts.
 *
 * Replaces field TEL: with TEL;VOICE: token.
 * Replaces field TEL;FAX: with TEL;FAX;HOME: token.
 * Adds missing fields
 *
 * @param i the item to process
 */
void preProcessContact(Item i) {
    data = i.data.data;
    
    data = replaceFirstInProperty(data, "EMAIL;INTERNET:", "EMAIL;INTERNET;HOME:");
    data = replaceFirstInProperty(data, "EMAIL;INTERNET:", "EMAIL;INTERNET;WORK:");
    
    i.data.data = data;
}

/**
 * Initializes hashmap of contact and event properties.
 */
void init() {
    //do nothing
}