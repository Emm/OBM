/*
 * Copyright (C) 2007 Funambol, Inc.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the Honest Public License, as published by
 * Funambol, either version 1 or (at your option) any later
 * version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY, TITLE, NONINFRINGEMENT or FITNESS FOR A PARTICULAR
 * PURPOSE.  See the Honest Public License for more details.
 *
 * You should have received a copy of the Honest Public License
 * along with this program; if not, write to Funambol,
 * 643 Bair Island Road, Suite 305 - Redwood City, CA 94063, USA
 */

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.funambol.framework.core.*;
import com.funambol.framework.core.Sync4jException;
import com.funambol.framework.engine.pipeline.InputMessageProcessor;
import com.funambol.framework.engine.pipeline.MessageProcessingContext;
import com.funambol.framework.engine.pipeline.StopProcessingException;
import com.funambol.framework.logging.FunambolLogger;
import com.funambol.framework.logging.FunambolLoggerFactory;
import com.funambol.framework.server.Sync4jDevice;

import com.funambol.foundation.synclet.PIMItemsHandler;

/**
 * Contacts:
 * =========
 * Processes the incoming vcard items and adds the missing tokens.
 * Handles large objects.
 * Replaces field TEL: with TEL;VOICE: token.
 * Replaces field TEL;FAX: with TEL;FAX;HOME: token.
 *
 * Calendars:
 * ==========
 * . Event
 *   Processes the incoming vEvent items and adds the missing tokens.
 *   Handles large objects.
 *
 * . Task
 *   Processes the incoming vTodo items and adds the missing tokens.
 *   Handles large objects.
 * NB: The device's time zone must be correctly set both on the server DB and
 * on the device itself. Moreover, the daylight saving setting must be set to
 * "Winter time", otherwise the fix for wrong summer time conversions will not
 * work.
 *
 * @version $Id: SonyEricssonT610in.bsh,v 1.1 2007/07/25 16:41:26 luigiafassina Exp $
 */

// ---------------------------------------------------------------- Private data
private final FunambolLogger log =
    FunambolLoggerFactory.getLogger("engine.pipeline");

private Map missingCardTokens  = null;
private Map missingEventTokens = null;
private Map missingTaskTokens  = null;

// ------------------------------------------------------ Synclet implementation
importCommands("/com/funambol/server/engine/pipeline/phones-support/bsh/commands");
importCommands("/com/funambol/server/engine/pipeline/phones-support/bsh/sonyericsson");

/**
 * Process input message and set MessageProcessingContext property.
 *
 * @param processingContext the message processing context
 * @param message the message to be processed
 *
 * @throws Sync4jException
 */
void preProcessMessage(MessageProcessingContext processingContext,
                       SyncML message                            )
throws Sync4jException {

    if (log.isTraceEnabled()) {
        log.trace("SonyEricssonT610in.preProcessMessage(...)");
    }

    removeCommandSize(message);

    // This map contains the three lists of items separated based on their type
    PIMItemsHandler pimItemsHandler = new PIMItemsHandler();
    Map mapItems =
        pimItemsHandler.extractIncomingPIMItems(processingContext, message);

    //
    // Retrieves the device from the db
    //
    Sync4jDevice device = deviceLookup(message.syncHdr.source.locURI);

    processPIMItems(mapItems, pimItemsHandler, device);
    
    throw new StopProcessingException("SonyEricssonT610in Synclet finished");
}

/**
 * Processes incoming items.
 *
 * @param mapItems the map that contains the three lists of items separated
 *                 based on their type
 * @param pimItemsHandler the object to handle the large object
 * @param device the device information
 *
 */
void processPIMItems(Map             mapItems       ,
                     PIMItemsHandler pimItemsHandler,
                     Sync4jDevice    device         ) {

    //
    // Cycle on vcard list
    //
    for (i: (List)mapItems.get(PIMItemsHandler.KEY_VCARD)) {
        preProcessContact(i);
        pimItemsHandler.fixLargeObjectSize(i);
    }
    
    TimeZone tz;
    if ((device != null) && (device.timeZone != null)) {
        tz = TimeZone.getTimeZone(device.timeZone);
    } else {
        tz = null;
    }

    //
    // Cycle on vevent list
    //
    for (i: (List)mapItems.get(PIMItemsHandler.KEY_VEVENT)) {
        preProcessEvent(i, tz);
        pimItemsHandler.fixLargeObjectSize(i);
    }
    
    //
    // Cycle on vtodo list
    //
    for (i: (List)mapItems.get(PIMItemsHandler.KEY_VTODO)) {
        preProcessTask(i, tz);
        pimItemsHandler.fixLargeObjectSize(i);
    }
}

/**
 * Replaces field TEL with TEL;VOICE.
 * Replaces field TEL;FAX with TEL;FAX;HOME.
 * Adds missing fields.
 *
 * @param i the item content
 */
void preProcessContact(Item i) {
    data = i.data.data;

    data = replaceInProperty(data, "TEL:",     "TEL;VOICE:"   );
    data = replaceInProperty(data, "TEL;FAX:", "TEL;FAX;HOME:");

    //
    // Adds void tokens if they are missing in VCARD item
    //
    i.data.data = addVoidTokens(data, "END:VCARD", missingCardTokens);
}

/**
 * Initializes hashmap of contact and event properties.
 */
void init() {
    missingCardTokens  = new HashMap();
    missingEventTokens = new HashMap();
    missingTaskTokens  = new HashMap();

    missingCardTokens.put("\r\nN"                   , "N:;;;;"         );
    missingCardTokens.put("\r\nTEL;VOICE:"          , "TEL;VOICE:"     );
    missingCardTokens.put("\r\nTEL;HOME:"           , "TEL;HOME:"      );
    missingCardTokens.put("\r\nTEL;WORK:"           , "TEL;WORK:"      );
    missingCardTokens.put("\r\nEMAIL;INTERNET;PREF" , "EMAIL;INTERNET:");
    missingCardTokens.put("\r\nTEL;CELL:"           , "TEL;CELL:"      );
    missingCardTokens.put("\r\nTEL;FAX;HOME:"       , "TEL;FAX;HOME:"  );
    missingCardTokens.put("\r\nNOTE"                , "NOTE:"          );
    missingCardTokens.put("\r\nORG"                 , "ORG:"           );
    missingCardTokens.put("\r\nTITLE"               , "TITLE:"         );

    missingEventTokens.put("\r\nDTSTART"     , "DTSTART:"    );
    missingEventTokens.put("\r\nDTEND"       , "DTEND:"      );
    missingEventTokens.put("\r\nSUMMARY"     , "SUMMARY:"    );
    missingEventTokens.put("\r\nLOCATION"    , "LOCATION:"   );
    missingEventTokens.put("\r\nDESCRIPTION" , "DESCRIPTION:");
    missingEventTokens.put("\r\nCLASS"       , "CLASS:"      );
    missingEventTokens.put("\r\nAALARM"      , "AALARM:"     );
    
    missingTaskTokens.put("\r\nSUMMARY" , "SUMMARY:");
    missingTaskTokens.put("\r\nAALARM"  , "AALARM:" );
}

/**
 * Fixes wrong summer time conversions by the device.
 * Adds missing fields.
 *
 * @param i the item content
 */
void preProcessEvent(Item i, TimeZone tz) {

    if (log.isTraceEnabled()) {
        log.trace("Using device time zone " + tz);
    }
    
    data = i.data.data;
    
    if ((tz != null) && (tz.useDaylightTime())) {
        data = fixSummerTime(data, "DTSTART"      , false, tz);
        data = fixSummerTime(data, "DTEND"        , false, tz);
        data = fixSummerTime(data, "LAST-MODIFIED", false, tz);
        data = fixSummerTime(data, "AALARM"       , false, tz);
    }
    
    //
    // Adds void tokens if they are missing in VEVENT item
    //
    data = addVoidTokens(data, "END:VEVENT", missingEventTokens);

    i.data.data = data + "END:VCALENDAR\r\n";
    
}

/**
 * Fixes wrong summer time conversions by the device.
 * Adds missing fields.
 *
 * @param i the item content
 */
void preProcessTask(Item i, TimeZone tz) {

    if (log.isTraceEnabled()) {
        log.trace("Using device time zone " + tz);
    }
    
    data = i.data.data;
    
    if ((tz != null) && (tz.useDaylightTime())) {
        data = fixSummerTime(data, "AALARM"   , false, tz);
        data = fixSummerTime(data, "COMPLETED", false, tz);
    }
    
    //
    // Adds void tokens if they are missing in VEVENT item
    //
    data = addVoidTokens(data, "END:VTODO", missingTaskTokens);

    i.data.data = data + "END:VCALENDAR\r\n";
    
}
